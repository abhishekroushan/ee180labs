$date
	Sun Mar  4 15:22:52 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module userlogic_test $end
$var wire 32 ! data_out [31:0] $end
$var wire 15 " input_buffer_addr [14:0] $end
$var wire 15 # output_buffer_addr [14:0] $end
$var wire 32 $ ul_instr [31:0] $end
$var wire 32 % ul_instr_addr [31:0] $end
$var wire 32 & ul_read_addr [31:0] $end
$var wire 32 ' ul_read_data [31:0] $end
$var wire 32 ( ul_status [31:0] $end
$var wire 32 ) ul_test [31:0] $end
$var wire 32 * ul_write_addr [31:0] $end
$var wire 32 + ul_write_data [31:0] $end
$var wire 16 , ul_write_data_hi [15:0] $end
$var wire 16 - ul_write_data_lo [15:0] $end
$var wire 2 . ul_write_en_hi [1:0] $end
$var wire 2 / ul_write_en_lo [1:0] $end
$var reg 1 0 clk $end
$var reg 32 1 cycle_count [32:1] $end
$var integer 32 2 dump_vars [31:0] $end
$var reg 8192 3 dump_vars_filename [8192:1] $end
$var integer 32 4 i [31:0] $end
$var reg 10 5 image_n_columns [9:0] $end
$var reg 10 6 image_n_rows [9:0] $end
$var reg 8192 7 input_buffer_filename [8192:1] $end
$var reg 8192 8 instr_mem_filename [8192:1] $end
$var reg 32 9 num_cycles [32:1] $end
$var reg 33 : out_end_addr [32:0] $end
$var reg 33 ; out_start_addr [32:0] $end
$var integer 32 < outfile [31:0] $end
$var reg 8192 = output_buffer_filename [8192:1] $end
$var reg 15 > read_addr [14:0] $end
$var integer 32 ? read_input_buffer [31:0] $end
$var integer 32 @ read_instr_mem [31:0] $end
$var integer 32 A result [31:0] $end
$var reg 1 B rst_n $end
$var reg 8192 C test_result_filename [8192:1] $end
$var reg 32 D ul_command [31:0] $end
$var integer 32 E write_output_buffer [31:0] $end
$var integer 32 F write_test_result [31:0] $end
$scope module instr_mem $end
$var wire 14 G addr [13:0] $end
$var wire 1 H clk $end
$var wire 32 I din [31:0] $end
$var wire 1 J we $end
$var reg 32 K dout [31:0] $end
$upscope $end
$scope module input_buffer $end
$var wire 15 L addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 M din [31:0] $end
$var wire 1 N we $end
$var reg 32 O dout [31:0] $end
$upscope $end
$scope module output_buffer $end
$var wire 15 P addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 Q din [31:0] $end
$var wire 4 R we [3:0] $end
$var reg 32 S dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$scope module ul $end
$var wire 1 T addr_cmd $end
$var wire 1 U addr_iobuf $end
$var wire 1 V addr_local $end
$var wire 1 W addr_status $end
$var wire 1 X addr_test $end
$var wire 1 H clk $end
$var wire 32 Y command [31:0] $end
$var wire 32 Z instr [31:0] $end
$var wire 32 [ instr_addr [31:0] $end
$var wire 32 \ mips_addr [31:0] $end
$var wire 32 ] mips_local_read_data [31:0] $end
$var wire 32 ^ mips_pc [31:0] $end
$var wire 32 _ mips_read_data [31:0] $end
$var wire 1 ` mips_read_en $end
$var wire 4 a mips_write_en [3:0] $end
$var wire 32 b read_addr_hi [31:0] $end
$var wire 32 c read_addr_lo [31:0] $end
$var wire 32 d read_data [31:0] $end
$var wire 16 e read_data_hi [15:0] $end
$var wire 16 f read_data_lo [15:0] $end
$var wire 1 g rst_n $end
$var wire 32 h status [31:0] $end
$var wire 32 i test [31:0] $end
$var wire 32 j write_addr_hi [31:0] $end
$var wire 32 k write_addr_lo [31:0] $end
$var wire 32 l write_data [31:0] $end
$var wire 16 m write_data_hi [15:0] $end
$var wire 16 n write_data_lo [15:0] $end
$var wire 2 o write_en_hi [1:0] $end
$var wire 2 p write_en_lo [1:0] $end
$var reg 32 q cmd_d [31:0] $end
$var reg 1 r read_cmd_d $end
$var reg 1 s read_iobuf_d $end
$var reg 32 t status_reg [31:0] $end
$var reg 32 u test_reg [31:0] $end
$scope module cpu $end
$var wire 32 v alu_op_x_ex [31:0] $end
$var wire 32 w alu_op_x_id [31:0] $end
$var wire 32 x alu_op_y_ex [31:0] $end
$var wire 32 y alu_op_y_id [31:0] $end
$var wire 1 z alu_op_y_zero_ex $end
$var wire 4 { alu_opcode_ex [3:0] $end
$var wire 4 | alu_opcode_id [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 32 ~ alu_result_ex [31:0] $end
$var wire 32 !" alu_result_mem [31:0] $end
$var wire 32 "" alu_sc_result_ex [31:0] $end
$var wire 1 #" atomic_en $end
$var wire 1 H clk $end
$var wire 1 $" en $end
$var wire 1 %" en_if $end
$var wire 32 &" instr [31:0] $end
$var wire 32 '" instr_id [31:0] $end
$var wire 30 (" instr_number_id [29:0] $end
$var wire 32 )" instr_sav [31:0] $end
$var wire 32 *" jr_pc_id [31:0] $end
$var wire 1 +" jump_branch_id $end
$var wire 1 ," jump_reg_id $end
$var wire 1 -" jump_target_id $end
$var wire 32 ." mem_addr [31:0] $end
$var wire 1 /" mem_atomic_ex $end
$var wire 1 0" mem_atomic_id $end
$var wire 1 1" mem_byte_ex $end
$var wire 1 2" mem_byte_id $end
$var wire 1 3" mem_byte_mem $end
$var wire 32 4" mem_out [31:0] $end
$var wire 32 5" mem_read_data [31:0] $end
$var wire 32 6" mem_read_data_byte_extend [31:0] $end
$var wire 8 7" mem_read_data_byte_select [7:0] $end
$var wire 1 ` mem_read_en $end
$var wire 1 8" mem_read_ex $end
$var wire 1 9" mem_read_id $end
$var wire 1 :" mem_read_mem $end
$var wire 1 ;" mem_sc_ex $end
$var wire 1 <" mem_sc_id $end
$var wire 1 =" mem_sc_mask_id $end
$var wire 1 >" mem_signextend_ex $end
$var wire 1 ?" mem_signextend_id $end
$var wire 1 @" mem_signextend_mem $end
$var wire 1 A" mem_we_ex $end
$var wire 1 B" mem_we_id $end
$var wire 32 C" mem_write_data [31:0] $end
$var wire 32 D" mem_write_data_ex [31:0] $end
$var wire 32 E" mem_write_data_id [31:0] $end
$var wire 4 F" mem_write_en [3:0] $end
$var wire 1 G" movn_ex $end
$var wire 1 H" movn_id $end
$var wire 1 I" movz_ex $end
$var wire 1 J" movz_id $end
$var wire 32 K" pc [31:0] $end
$var wire 32 L" pc_id [31:0] $end
$var wire 32 M" pc_if [31:0] $end
$var wire 1 N" reg_we_cond_ex $end
$var wire 1 O" reg_we_ex $end
$var wire 1 P" reg_we_id $end
$var wire 1 Q" reg_we_mem $end
$var wire 1 R" reg_we_wb $end
$var wire 5 S" reg_write_addr_ex [4:0] $end
$var wire 5 T" reg_write_addr_id [4:0] $end
$var wire 5 U" reg_write_addr_mem [4:0] $end
$var wire 5 V" reg_write_addr_wb [4:0] $end
$var wire 32 W" reg_write_data_mem [31:0] $end
$var wire 32 X" reg_write_data_wb [31:0] $end
$var wire 5 Y" rs_addr_id [4:0] $end
$var wire 32 Z" rs_data [31:0] $end
$var wire 32 [" rs_data_id [31:0] $end
$var wire 32 \" rs_data_id_fetch [31:0] $end
$var wire 1 ]" rst $end
$var wire 1 ^" rst_ex $end
$var wire 1 _" rst_id $end
$var wire 5 `" rt_addr_id [4:0] $end
$var wire 32 a" rt_data [31:0] $end
$var wire 32 b" rt_data_id [31:0] $end
$var wire 32 c" sc_result [31:0] $end
$var wire 1 d" stall $end
$var wire 1 e" stall_r $end
$scope module if_stage $end
$var wire 32 f" br_target [31:0] $end
$var wire 1 H clk $end
$var wire 1 %" en $end
$var wire 26 g" instr_id [25:0] $end
$var wire 32 h" j_addr [31:0] $end
$var wire 1 +" jump_branch $end
$var wire 1 ," jump_reg $end
$var wire 1 -" jump_target $end
$var wire 32 i" pc [31:0] $end
$var wire 32 j" pc_id [31:0] $end
$var wire 32 k" pc_id_p4 [31:0] $end
$var wire 32 l" pc_next [31:0] $end
$var wire 32 m" rs_data_in [31:0] $end
$var wire 1 ]" rst $end
$scope module pc_reg $end
$var wire 1 H clk $end
$var wire 32 n" d [31:0] $end
$var wire 1 %" en $end
$var wire 1 ]" r $end
$var reg 32 o" q [31:0] $end
$upscope $end
$upscope $end
$scope module pc_if2id $end
$var wire 1 H clk $end
$var wire 32 p" d [31:0] $end
$var wire 1 %" en $end
$var wire 1 ]" r $end
$var reg 32 q" q [31:0] $end
$upscope $end
$scope module instr_sav_dff $end
$var wire 1 H clk $end
$var wire 32 r" d [31:0] $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 32 s" q [31:0] $end
$upscope $end
$scope module stall_f_dff $end
$var wire 1 H clk $end
$var wire 1 d" d $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 1 t" q $end
$upscope $end
$scope module rs_data_id_to_fetch $end
$var wire 1 H clk $end
$var wire 32 u" d [31:0] $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 32 v" q [31:0] $end
$upscope $end
$scope module rst_id_ex $end
$var wire 1 H clk $end
$var wire 1 _" d $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 1 w" q $end
$upscope $end
$scope module d_stage $end
$var wire 32 x" alu_op_x [31:0] $end
$var wire 32 y" alu_op_y [31:0] $end
$var wire 32 z" alu_result_ex [31:0] $end
$var wire 1 /" atomic_ex $end
$var wire 1 0" atomic_id $end
$var wire 1 {" forward_rs_ex $end
$var wire 1 |" forward_rs_mem $end
$var wire 1 }" forward_rt_ex $end
$var wire 1 ~" forward_rt_mem $end
$var wire 6 !# funct [5:0] $end
$var wire 32 "# imm [31:0] $end
$var wire 32 ## imm_sign_extend [31:0] $end
$var wire 32 $# imm_upper [31:0] $end
$var wire 32 %# imm_zero_extend [31:0] $end
$var wire 16 &# immediate [15:0] $end
$var wire 32 '# instr [31:0] $end
$var wire 1 (# isALUImm $end
$var wire 1 )# isBEQ $end
$var wire 1 *# isBGEZAL $end
$var wire 1 +# isBGEZNL $end
$var wire 1 ,# isBGTZ $end
$var wire 1 -# isBLEZ $end
$var wire 1 .# isBLTZAL $end
$var wire 1 /# isBLTZNL $end
$var wire 1 0# isBNE $end
$var wire 1 1# isBranchLink $end
$var wire 1 2# isEqual $end
$var wire 1 3# isGeZ $end
$var wire 1 4# isJ $end
$var wire 1 5# isJR $end
$var wire 1 6# isLA $end
$var wire 1 7# isLUI $end
$var wire 1 8# isLZ $end
$var wire 1 9# isLeZ $end
$var wire 1 :# isSLL $end
$var wire 1 ;# isSLLV $end
$var wire 1 <# isSRA $end
$var wire 1 =# isSRAV $end
$var wire 1 ># isSRL $end
$var wire 1 ?# isSRLV $end
$var wire 1 @# isShift $end
$var wire 1 A# isShiftImm $end
$var wire 32 B# jr_pc [31:0] $end
$var wire 1 +" jump_branch $end
$var wire 1 ," jump_reg $end
$var wire 1 -" jump_target $end
$var wire 1 2" mem_byte $end
$var wire 1 9" mem_read $end
$var wire 1 8" mem_read_ex $end
$var wire 1 <" mem_sc_id $end
$var wire 1 =" mem_sc_mask_id $end
$var wire 1 ?" mem_signextend $end
$var wire 1 B" mem_we $end
$var wire 32 C# mem_write_data [31:0] $end
$var wire 1 H" movn $end
$var wire 1 J" movz $end
$var wire 6 D# op [5:0] $end
$var wire 32 E# pc [31:0] $end
$var wire 5 F# rd_addr [4:0] $end
$var wire 1 G# read_from_rs $end
$var wire 1 H# read_from_rt $end
$var wire 1 P" reg_we $end
$var wire 1 O" reg_we_ex $end
$var wire 1 Q" reg_we_mem $end
$var wire 5 I# reg_write_addr [4:0] $end
$var wire 5 J# reg_write_addr_ex [4:0] $end
$var wire 5 K# reg_write_addr_mem [4:0] $end
$var wire 32 L# reg_write_data_mem [31:0] $end
$var wire 5 M# rs_addr [4:0] $end
$var wire 32 N# rs_data [31:0] $end
$var wire 32 O# rs_data_in [31:0] $end
$var wire 1 P# rs_mem_dependency $end
$var wire 5 Q# rt_addr [4:0] $end
$var wire 32 R# rt_data [31:0] $end
$var wire 32 S# rt_data_in [31:0] $end
$var wire 1 T# rt_mem_dependency $end
$var wire 5 U# shamt [4:0] $end
$var wire 32 V# shift_amount [31:0] $end
$var wire 1 d" stall $end
$var wire 1 W# use_imm $end
$var reg 4 X# alu_opcode [3:0] $end
$upscope $end
$scope module atomic $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 0" d $end
$var wire 1 #" en $end
$var wire 1 _" r $end
$var reg 1 Y# q $end
$upscope $end
$scope module sc $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 <" d $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 1 Z# q $end
$upscope $end
$scope module alu_op_x_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 32 [# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 32 \# q [31:0] $end
$upscope $end
$scope module alu_op_y_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 32 ]# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 32 ^# q [31:0] $end
$upscope $end
$scope module alu_opcode_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 4 _# d [3:0] $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 4 `# q [3:0] $end
$upscope $end
$scope module movn $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 H" d $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 1 a# q $end
$upscope $end
$scope module movz $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 J" d $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 1 b# q $end
$upscope $end
$scope module lw_mem_read_ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 9" d $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 1 c# q $end
$upscope $end
$scope module mem_write_data_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 32 d# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 32 e# q [31:0] $end
$upscope $end
$scope module mem_we_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 f# d $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 1 g# q $end
$upscope $end
$scope module mem_read_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 h# d $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 1 i# q $end
$upscope $end
$scope module mem_byte_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 2" d $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 1 j# q $end
$upscope $end
$scope module mem_signextend_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 ?" d $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 1 k# q $end
$upscope $end
$scope module lw_mem_read_mem $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 8" d $end
$var wire 1 $" en $end
$var wire 1 ^" r $end
$var reg 1 l# q $end
$upscope $end
$scope module reg_write_addr_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 5 m# d [4:0] $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 5 n# q [4:0] $end
$upscope $end
$scope module reg_we_id2ex $end
$var wire 1 ]" ar $end
$var wire 1 H clk $end
$var wire 1 P" d $end
$var wire 1 $" en $end
$var wire 1 _" r $end
$var reg 1 o# q $end
$upscope $end
$scope module x_stage $end
$var wire 1 p# add_check $end
$var wire 1 q# add_neg_over $end
$var wire 1 r# add_pos_over $end
$var wire 1 s# alu_neg $end
$var wire 32 t# alu_op_x [31:0] $end
$var wire 32 u# alu_op_x_signed [31:0] $end
$var wire 32 v# alu_op_y [31:0] $end
$var wire 32 w# alu_op_y_signed [31:0] $end
$var wire 1 z alu_op_y_zero $end
$var wire 4 x# alu_opcode [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 1 y# sub_check $end
$var wire 1 z# sub_neg_over $end
$var wire 1 {# sub_pos_over $end
$var wire 1 |# x_neg $end
$var wire 1 }# y_neg $end
$var reg 32 ~# alu_result [31:0] $end
$upscope $end
$scope module alu_result_ex2mem $end
$var wire 1 H clk $end
$var wire 32 !$ d [31:0] $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 32 "$ q [31:0] $end
$upscope $end
$scope module mem_read_ex2mem $end
$var wire 1 H clk $end
$var wire 1 #$ d $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 1 $$ q $end
$upscope $end
$scope module mem_byte_ex2mem $end
$var wire 1 H clk $end
$var wire 1 1" d $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 1 %$ q $end
$upscope $end
$scope module mem_signextend_ex2mem $end
$var wire 1 H clk $end
$var wire 1 >" d $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 1 &$ q $end
$upscope $end
$scope module reg_write_addr_ex2mem $end
$var wire 1 H clk $end
$var wire 5 '$ d [4:0] $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 5 ($ q [4:0] $end
$upscope $end
$scope module reg_we_ex2mem $end
$var wire 1 H clk $end
$var wire 1 O" d $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 1 )$ q $end
$upscope $end
$scope module reg_write_data_mem2wb $end
$var wire 1 H clk $end
$var wire 32 *$ d [31:0] $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 32 +$ q [31:0] $end
$upscope $end
$scope module reg_write_addr_mem2wb $end
$var wire 1 H clk $end
$var wire 5 ,$ d [4:0] $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 5 -$ q [4:0] $end
$upscope $end
$scope module reg_we_mem2wb $end
$var wire 1 H clk $end
$var wire 1 Q" d $end
$var wire 1 $" en $end
$var wire 1 ]" r $end
$var reg 1 .$ q $end
$upscope $end
$scope module w_stage $end
$var wire 1 H clk $end
$var wire 1 $" en $end
$var wire 1 R" reg_we $end
$var wire 5 /$ reg_write_addr [4:0] $end
$var wire 32 0$ reg_write_data [31:0] $end
$var wire 5 1$ rs_addr [4:0] $end
$var wire 32 2$ rs_data [31:0] $end
$var wire 5 3$ rt_addr [4:0] $end
$var wire 32 4$ rt_data [31:0] $end
$upscope $end
$upscope $end
$scope module mips_local_store $end
$var wire 12 5$ addr [11:0] $end
$var wire 1 H clk $end
$var wire 32 6$ din [31:0] $end
$var wire 4 7$ we [3:0] $end
$var reg 32 8$ dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 8$
b0 7$
b0 6$
b0 5$
bx 4$
bx 3$
bx 2$
bx 1$
b0 0$
b0 /$
0.$
b0 -$
b0 ,$
b0 +$
b0 *$
0)$
b0 ($
b0 '$
0&$
0%$
0$$
0#$
b0 "$
b0 !$
b0 ~#
0}#
0|#
0{#
0z#
0y#
b0 x#
b0 w#
b0 v#
b0 u#
b0 t#
0s#
0r#
0q#
0p#
0o#
b0 n#
bx m#
0l#
0k#
0j#
0i#
0h#
0g#
xf#
b0 e#
bx d#
0c#
0b#
0a#
b0 `#
b1101 _#
b0 ^#
bx ]#
b0 \#
bx [#
0Z#
0Y#
b1101 X#
xW#
b0xxxxx V#
bx U#
0T#
bx S#
bx R#
bx Q#
0P#
bx O#
bx N#
bx M#
b0 L#
b0 K#
b0 J#
bx I#
xH#
xG#
bx F#
b0 E#
bx D#
bx C#
bx B#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
bx '#
bx &#
b0xxxxxxxxxxxxxxxx %#
bx0000000000000000 $#
bx ##
bx "#
bx !#
0~"
0}"
0|"
0{"
b0 z"
bx y"
bx x"
0w"
b0 v"
bx u"
0t"
b0 s"
bx r"
b0 q"
b0 p"
b0 o"
bx n"
bx m"
bx l"
b100 k"
b0 j"
b0 i"
bx h"
bx g"
bx f"
0e"
0d"
b0 c"
bx b"
bx a"
bx `"
0_"
0^"
0]"
b0 \"
bx ["
bx Z"
bx Y"
b0 X"
b0 W"
b0 V"
b0 U"
bx T"
b0 S"
0R"
0Q"
xP"
0O"
0N"
b0 M"
b0 L"
b0 K"
xJ"
0I"
xH"
0G"
b0 F"
bx E"
b0 D"
b0 C"
xB"
0A"
0@"
x?"
0>"
0="
x<"
0;"
0:"
x9"
08"
bx 7"
b0xxxxxxxx 6"
bx 5"
bx 4"
03"
x2"
01"
00"
0/"
b0 ."
x-"
x,"
x+"
bx *"
b0 )"
b0 ("
bx '"
bx &"
1%"
1$"
x#"
b0 ""
b0 !"
b0 ~
0}
b1101 |
b0 {
1z
bx y
b0 x
bx w
b0 v
bx u
bx t
xs
xr
bx q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
bx i
bx h
0g
bx f
bx e
bx d
b0 c
b0 b
b0 a
0`
bx _
b0 ^
bx ]
b0 \
b0 [
bx Z
b0xxxxxxxxxxxxxxxxxxxx10 Y
0X
0W
1V
0U
0T
bx S
b0 R
b0 Q
b0 P
bx O
0N
b0 M
b0 L
bx K
0J
b0 I
0H
b0 G
b1 F
b0 E
b0xxxxxxxxxxxxxxxxxxxx10 D
b111010001100101011100110111010001110011001011110110111101110010001011110111010001100101011100110111010000101110011100100110010101110011011101010110110001110100 C
0B
b1 A
b1 @
b0 ?
b0 >
bx =
bx <
b0 ;
b100000000000000000 :
b1111101000 9
b1110100011001010111001101110100011100110010111101101111011100100010111101100010011101010110100101101100011001000010111101100001011100000111000000101110011010000110010101111000 8
bx 7
bx 6
bx 5
bx 4
b111010001100101011100110111010001110011001011110110111101110010001011110111001101110100011100100110010101100001011011010111011101100001011101100110010100101110011101100110001101100100 3
b1 2
b0 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
bx )
bx (
bx '
b0 &
b0 %
bx $
b0 #
b0 "
bx !
$end
#5000
0@#
b0 V#
b0 w
b0 x"
b0 [#
13#
19#
08#
b100 l"
b100 n"
b0 *"
b0 B#
b0 Z"
b0 m"
b0 N#
0A#
0+"
01#
b10000100000000000001000 h"
b100000000000001100 f"
0-"
b10000000000000100000000000000000 y
b10000000000000100000000000000000 y"
b10000000000000100000000000000000 ]#
1P"
0f#
0#"
b0 ["
b0 u"
b0 O#
b0 2$
0+#
0*#
0,#
0-#
0/#
0.#
b10000 T"
b10000 I#
b10000 m#
0,"
05#
06#
0:#
0>#
0<#
0;#
0?#
0=#
b1100 X#
b1100 |
b1100 _#
b10000000000000100000000000000000 "#
0)#
00#
04#
1W#
0G#
0H#
17#
0(#
0B"
09"
02"
1?"
0<"
b1111 D#
b0 Y"
b0 M#
b0 1$
b10000 `"
b10000 Q#
b10000 3$
b10000 F#
b0 U#
0H"
0J"
b10 !#
b11111111111111111000000000000010 ##
b10000000000000100000000000000000 $#
b1000000000000010 %#
b1000000000000010 &#
b100001000000000000010 g"
b111100000100001000000000000010 '"
b111100000100001000000000000010 '#
b111100000100001000000000000010 K
b111100000100001000000000000010 $
b111100000100001000000000000010 Z
b111100000100001000000000000010 &"
b111100000100001000000000000010 r"
bx S
bx 8$
b0 u
b0 )
b0 i
b0 t
b0 (
b0 h
0s
0r
b0 q
10
1H
#10000
00
0H
#15000
bx 8$
bx S
10
1H
#20000
1]"
00
0H
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
1B
1g
#25000
0V
02#
b10000000000000100000000000000000 E"
b10000000000000100000000000000000 C#
b10000000000000100000000000000000 d#
b10000000000000100000000000000000 a"
b10000000000000100000000000000000 R#
bx ,
bx m
bx +
bx Q
bx -
bx n
0r#
1{#
1s#
b1000 l"
b1000 n"
b1 G
1O"
1}"
bx l
bx C"
bx 6$
1}#
b10000000000000100000000000000000 ~#
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 z"
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ."
b10000000000000100000000000000000 ""
b10000000000000100000000000000000 !$
b1 %
b1 [
bx S
bx 8$
1o#
1N"
b10000 n#
b10000 S"
b10000 J#
b10000 '$
1k#
1>"
bx e#
bx D"
b1100 `#
b1100 {
b1100 x#
b10000000000000100000000000000000 ^#
b10000000000000100000000000000000 w#
0z
b10000000000000100000000000000000 x
b10000000000000100000000000000000 v#
b111100000100001000000000000010 s"
b111100000100001000000000000010 )"
b100 o"
b100 M"
b100 i"
b100 p"
b100 ^
b100 K"
10
1H
#30000
00
0H
b1111100111 1
b0xxxxxxxxxxxxxxxxxxxx01 D
b0xxxxxxxxxxxxxxxxxxxx01 Y
#35000
b1 y
b1 y"
b1 ]#
x2#
bx E"
bx C#
bx d#
bx a"
bx R#
b10010 T"
b10010 I#
b10010 m#
b11 X#
b11 |
b11 _#
b1 "#
b10010000000000000000100 h"
1G#
07#
1(#
b1101 D#
0}"
b10010 `"
b10010 Q#
b10010 3$
b0 F#
b1 !#
b1 ##
b10000000000000000 $#
b1 %#
b1 &#
b100100000000000000001 g"
b1100 l"
b1100 n"
b10 G
b1000000000000010 ,
b1000000000000010 m
b10000000000000100000000000000000 +
b10000000000000100000000000000000 Q
b0 -
b0 n
b110100000100100000000000000001 '"
b110100000100100000000000000001 '#
b10 %
b10 [
b1 ("
b10000000000000100000000000000000 l
b10000000000000100000000000000000 C"
b10000000000000100000000000000000 6$
b10000000000000100000000000000000 W"
b10000000000000100000000000000000 L#
b10000000000000100000000000000000 *$
bx 6"
bx 8$
bx S
b110100000100100000000000000001 K
b110100000100100000000000000001 $
b110100000100100000000000000001 Z
b110100000100100000000000000001 &"
b110100000100100000000000000001 r"
b1000 o"
b1000 M"
b1000 i"
b1000 p"
b1000 ^
b1000 K"
b100 q"
b1100 f"
b1000 k"
b100 L"
b100 j"
b100 E#
b10000000000000100000000000000000 e#
b10000000000000100000000000000000 D"
b10000000000000100000000000000000 "$
b10000000000000100000000000000000 !"
1&$
1@"
b10000 ($
0~"
b10000 U"
b10000 K#
b10000 ,$
1)$
1Q"
10
1H
#40000
00
0H
b1111100110 1
#45000
b11111111111111111000100000100101 "#
b10001 T"
b10001 I#
b10001 m#
b10010100010000010010100 h"
1V
0W#
1H#
0(#
b0 D#
b10001 F#
b100101 !#
b11111111111111111000100000100101 ##
b10001000001001010000000000000000 $#
b1000100000100101 %#
b1000100000100101 &#
b100101000100000100101 g"
bx ,
bx m
bx +
bx Q
bx -
bx n
0s#
b10000 l"
b10000 n"
b11 G
b100101000100000100101 '"
b100101000100000100101 '#
02#
b1 E"
b1 C#
b1 d#
b1 a"
b1 R#
bx l
bx C"
bx 6$
0{#
0}#
b1 ~#
b1 ~
b1 z"
0U
0W
b1 \
b1 ."
b1 ""
b1 !$
b10 ("
b11 %
b11 [
b100101000100000100101 K
b100101000100000100101 $
b100101000100000100101 Z
b100101000100000100101 &"
b100101000100000100101 r"
bx S
bx 8$
1.$
1R"
b10000 -$
b10000 V"
b10000 /$
b10000000000000100000000000000000 +$
b10000000000000100000000000000000 X"
b10000000000000100000000000000000 0$
b10010 n#
1}"
b10010 S"
b10010 J#
b10010 '$
bx e#
bx D"
b11 `#
b11 {
b11 x#
b1 ^#
b1 w#
b1 x
b1 v#
b110100000100100000000000000001 s"
b110100000100100000000000000001 )"
b1000 q"
b100010000010100000 f"
b1100 k"
b1000 L"
b1000 j"
b1000 E#
b1100 o"
b1100 M"
b1100 i"
b1100 p"
b1100 ^
b1100 K"
10
1H
#50000
00
0H
b1111100101 1
#55000
b10000000000000100000000000000000 w
b10000000000000100000000000000000 x"
b10000000000000100000000000000000 [#
19#
18#
b10000000000000100000000000000000 *"
b10000000000000100000000000000000 B#
b10000000000000100000000000000000 Z"
b10000000000000100000000000000000 m"
b10000000000000100000000000000000 N#
b100 "#
0P"
1f#
b10000000000000100000000000000000 ["
b10000000000000100000000000000000 u"
b10000000000000100000000000000000 O#
b10000000000000100000000000000000 2$
b1101 X#
b1101 |
b1101 _#
b1000010001000000000000010000 h"
1W#
1B"
b101011 D#
b10000 Y"
b10000 M#
b10000 1$
b10001 `"
b10001 Q#
b10001 3$
b0 F#
b100 !#
b100 ##
b1000000000000000000 $#
b100 %#
b100 &#
b10000100010000000000000100 g"
b10100 l"
b10100 n"
b100 G
b0 ,
b0 m
b1 +
b1 Q
b1 -
b1 n
b100 y
b100 y"
b100 ]#
b10101110000100010000000000000100 '"
b10101110000100010000000000000100 '#
b100 %
b100 [
b11 ("
b1 l
b1 C"
b1 6$
b1 E"
b1 C#
b1 d#
b1 a"
b1 R#
b1 W"
b1 L#
b1 *$
bx 8$
bx S
b10101110000100010000000000000100 K
b10101110000100010000000000000100 $
b10101110000100010000000000000100 Z
b10101110000100010000000000000100 &"
b10101110000100010000000000000100 r"
b10000 o"
b10000 M"
b10000 i"
b10000 p"
b10000 ^
b10000 K"
b1100 q"
b100000 f"
b10000 k"
b1100 L"
b1100 j"
b1100 E#
b100101000100000100101 s"
b100101000100000100101 )"
b1 e#
b1 D"
b10001 n#
1}"
b10001 S"
b10001 J#
b10001 '$
b1 "$
b1 !"
b10010 ($
0~"
b10010 U"
b10010 K#
b10010 ,$
10
1H
#60000
00
0H
b1111100100 1
#65000
b0 V#
19#
b0 y
b0 y"
b0 ]#
b10000000000000100000000000000000 w
b10000000000000100000000000000000 x"
b10000000000000100000000000000000 [#
18#
b0 "#
02#
b10000000000000100000000000000000 *"
b10000000000000100000000000000000 B#
b10000000000000100000000000000000 Z"
b10000000000000100000000000000000 m"
b10000000000000100000000000000000 N#
b1000010001000000000000000000 h"
0V
b1 "
b1 L
b0 !#
b0 ##
b0 $#
b0 %#
b0 &#
b10000100010000000000000000 g"
b10000000000000100000000000000000 ["
b10000000000000100000000000000000 u"
b10000000000000100000000000000000 O#
b10000000000000100000000000000000 2$
b0 7$
0r#
1s#
b1 5$
b1 j
b1 *
b1 k
b1 b
b1 &
b1 c
b11000 l"
b11000 n"
b101 G
b10101110000100010000000000000000 '"
b10101110000100010000000000000000 '#
0O"
0}"
b1111 a
b1111 F"
0z#
1|#
b10000000000000100000000000000100 ~#
b10000000000000100000000000000100 ~
b10000000000000100000000000000100 z"
1X
b10000000000000100000000000000100 \
b10000000000000100000000000000100 ."
b10000000000000100000000000000100 ""
b10000000000000100000000000000100 !$
b100 ("
b101 %
b101 [
b10101110000100010000000000000000 K
b10101110000100010000000000000000 $
b10101110000100010000000000000000 Z
b10101110000100010000000000000000 &"
b10101110000100010000000000000000 r"
bx S
bx 8$
b10010 -$
b10010 V"
b10010 /$
b1 +$
b1 X"
b1 0$
b10001 ($
1~"
b10001 U"
b10001 K#
b10001 ,$
0o#
0N"
1g#
1A"
b1101 `#
1p#
b1101 {
b1101 x#
b100 ^#
b100 w#
b100 x
b100 v#
b10000000000000100000000000000000 \#
b10000000000000100000000000000000 u#
b10000000000000100000000000000000 v
b10000000000000100000000000000000 t#
b10000000000000100000000000000000 v"
b10000000000000100000000000000000 \"
b10101110000100010000000000000100 s"
b10101110000100010000000000000100 )"
b10000 q"
b10100 f"
b10100 k"
b10000 L"
b10000 j"
b10000 E#
b10100 o"
b10100 M"
b10100 i"
b10100 p"
b10100 ^
b10100 K"
10
1H
#70000
00
0H
b1111100011 1
#75000
b0 w
b0 x"
b0 [#
08#
b0 *"
b0 B#
b0 Z"
b0 m"
b0 N#
b101 y
b101 y"
b101 ]#
b101 "#
0G#
0H#
1-"
0f#
b0 ["
b0 u"
b0 O#
b0 2$
b0 T"
b0 I#
b0 m#
b1011 X#
b1011 |
b1011 _#
b10100 h"
b0 "
b0 L
b0 b"
b0 S#
b0 4$
14#
0B"
b10 D#
b0 Y"
b0 M#
b0 1$
b0 `"
b0 Q#
b0 3$
b101 !#
b101 ##
b1010000000000000000 $#
b101 %#
b101 &#
b101 g"
b10100 l"
b10100 n"
b110 G
b0 5$
b0 j
b0 *
b0 k
b0 b
b0 &
b0 c
12#
b0 E"
b0 C#
b0 d#
b0 a"
b0 R#
b1000000000000000000000000101 '"
b1000000000000000000000000101 '#
b110 %
b110 [
b101 ("
b10000000000000100000000000000000 ~#
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 z"
0X
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ."
b10000000000000100000000000000000 ""
b10000000000000100000000000000000 !$
b10000000000000100000000000000100 W"
b10000000000000100000000000000100 L#
b10000000000000100000000000000100 *$
b1 u
b1 )
b1 i
bx 8$
bx S
b1000000000000000000000000101 K
b1000000000000000000000000101 $
b1000000000000000000000000101 Z
b1000000000000000000000000101 &"
b1000000000000000000000000101 r"
b11000 o"
b11000 M"
b11000 i"
b11000 p"
b11000 ^
b11000 K"
b10100 q"
b101100 f"
b11000 k"
b10100 L"
b10100 j"
b10100 E#
b10101110000100010000000000000000 s"
b10101110000100010000000000000000 )"
b0 ^#
b0 w#
1z
b0 x
b0 v#
b10000000000000100000000000000100 "$
b10000000000000100000000000000100 !"
0)$
0~"
0Q"
b10001 -$
b10001 V"
b10001 /$
10
1H
#80000
00
0H
b1111100010 1
#85000
1@#
1A#
b0 "#
b11000 l"
b11000 n"
0G#
1H#
0-"
b0 y
b0 y"
b0 ]#
1:#
b1010 X#
b1010 |
b1010 _#
b0 h"
1V
1P"
04#
0W#
b0 D#
b0 !#
b0 ##
b0 $#
b0 %#
b0 &#
b0 g"
b0 +
b0 Q
b0 -
b0 n
0s#
b0 .
b0 o
b0 R
b0 /
b0 p
b101 G
b0 '"
b0 '#
b10000000000000100000000000000000 W"
b10000000000000100000000000000000 L#
b10000000000000100000000000000000 *$
b0 a
b0 F"
b0 l
b0 C"
b0 6$
0|#
b0 ~#
b0 ~
b0 z"
0U
0W
b0 \
b0 ."
b0 ""
b0 !$
b110 ("
b101 %
b101 [
b0 K
b0 $
b0 Z
b0 &"
b0 r"
bx S
bx 8$
b1 t
b1 (
b1 h
0.$
0R"
b10000000000000100000000000000100 +$
b10000000000000100000000000000100 X"
b10000000000000100000000000000100 0$
b10000000000000100000000000000000 "$
b10000000000000100000000000000000 !"
b0 n#
b0 S"
b0 J#
b0 '$
0g#
0A"
b0 e#
b0 D"
b1011 `#
0p#
b1011 {
b1011 x#
b101 ^#
b101 w#
0z
b101 x
b101 v#
b0 \#
b0 u#
b0 v
b0 t#
b0 v"
b0 \"
b1000000000000000000000000101 s"
b1000000000000000000000000101 )"
b11000 q"
b11100 f"
b11100 k"
b11000 L"
b11000 j"
b11000 E#
b10100 o"
b10100 M"
b10100 i"
b10100 p"
b10100 ^
b10100 K"
10
1H
#90000
00
0H
b10000000000000000000000000000011 4
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
